<div
  id="modal-sync-collect"
  class="fixed inset-0 flex flex-col items-center justify-center bg-black bg-opacity-50 z-20 hidden"
>
  <div
    class="bg-white rounded-lg p-4 w-10/12 max-w-md h-[70vh] overflow-y-auto"
  >
    <div class="w-full flex justify-end">
      <button
        id="close-modal-sync"
        class="w-[30px] bg-red-700 text-white rounded-full px-2"
      >
        x
      </button>
    </div>
    <div>
      <h1 class="text-xl font-bold text-gray-800 text-center">
        Synchronize survey
      </h1>
    </div>
    <div id="container-data" class="flex flex-col justify-center items-center">
    </div>
    <div class="w3/4">
      <button
        id="btn-sync-survey"
        onclick="syncSurveyInCloud()"
        class="w-full flex bg-blue-800 hover:bg-blue-900 text-white py-1 px-2 rounded-full justify-center"
      >
        <span class="px-2">Sync</span>
        <img src="/icons/sync.svg" alt="sync surveys" class="w-6" />
      </button>
    </div>
  </div>
  <script is:inline>
    $modalSyncCollect = document.getElementById("modal-sync-collect");
    $containerData = document.getElementById("container-data");
    $btnCloseModalSync = document.getElementById("close-modal-sync");
    const btnGetVariables = document.getElementById("btn-sync-survey");
    let surveys = [];
    let plantSyncId = null;

    function hideModalSync() {
      modalIsOpenSync = false;
      $modalSyncCollect?.classList.add("hidden");
      hideLoading();
    }

    function showModalSync(plantId) {
      plantSyncId = plantId;
      setTimeout(() => {
        modalIsOpenSync = true;
      }, 100);
      $modalSyncCollect?.classList.remove("hidden");
      getCollectDataForPlantId(plantId);
    }

    async function getCollectDataForPlantId(plantId) {
      const containerData = document.getElementById("container-data");
      containerData.innerHTML = "";

      let collectStore = await getMawoisWithCollectDataStore();
      if (collectStore && collectStore.length > 0) {
        collectStore = collectStore.filter(
          (collect) => collect.plantId == plantId,
        );
        const surveySync = mapSurveyForSync(collectStore);
        createDivsFromMawois(surveySync);
      }
    }

    $btnCloseModalSync.addEventListener("click", () => {
      hideModalSync();
    });

    function mapSurveyForSync(mawoisStore) {
      const syncSurvey = groupPointsByDate(mawoisStore);
      surveys = [];
      syncSurvey.forEach((mawoi) => {
        let { mawoi: mawoiMemory } = findMawoiForCollectData(mawoi.id);
        mawoi.groupedPoints.forEach((points) => {
          let details = {
            mawoiDescription: mawoi.description,
            mawoiId: mawoi.id,
            date: points[0].date,
            points: points.map((point) => point.description),
            vars: points
              .map((point) => {
                let pointX = null;
                let pointY = null;
                let pointZ = null;

                if (mawoiMemory.isMonoaxial) {
                  pointX = mawoiMemory.points.find(
                    (p) => p.code == point.description,
                  );
                } else {
                  pointX = mawoiMemory.points.find(
                    (p) =>
                      p.code == point.description + "X" ||
                      p.code == point.description + "H",
                  );
                  pointY = mawoiMemory.points.find(
                    (p) =>
                      p.code == point.description + "Y" ||
                      p.code == point.description + "V",
                  );
                  pointZ = mawoiMemory.points.find(
                    (p) =>
                      p.code == point.description + "Z" ||
                      p.code == point.description + "A",
                  );
                }

                let pointsWithVars = [];
                if (pointX) {
                  pointsWithVars.push({
                    pointId: pointX.id,
                    ...point.vars,
                  });
                }
                if (pointY) {
                  pointsWithVars.push({
                    pointId: pointY.id,
                    ...point.vars,
                  });
                }
                if (pointZ) {
                  pointsWithVars.push({
                    pointId: pointZ.id,
                    ...point.vars,
                  });
                }
                return pointsWithVars;
              })
              .flat(),
            waveform: [],
            spectrum: [],
          };
          points.forEach((point) => {
            let pointX = null;
            let pointY = null;
            let pointZ = null;

            if (mawoiMemory.isMonoaxial) {
              pointX = mawoiMemory.points.find(
                (p) => p.code == point.description,
              );
            } else {
              pointX = mawoiMemory.points.find(
                (p) =>
                  p.code == point.description + "X" ||
                  p.code == point.description + "H",
              );
            }

            if (pointX) {
              point["NEXT_X_W"].forEach((value) => {
                details.waveform.push({
                  pointId: pointX.id,
                  pointCode: pointX.code,
                  measure_y: value,
                });
              });
              point["NEXT_X_S"].forEach((value) => {
                details.spectrum.push({
                  pointId: pointX.id,
                  pointCode: pointX.code,
                  measure_y: value,
                });
              });
            }

            pointY = mawoiMemory.points.find(
              (p) =>
                p.code == point.description + "Y" ||
                p.code == point.description + "V",
            );
            if (pointY) {
              point["NEXT_Y_W"].forEach((value) => {
                details.waveform.push({
                  pointId: pointY.id,
                  pointCode: pointY.code,
                  measure_y: value,
                });
              });
              point["NEXT_Y_S"].forEach((value) => {
                details.spectrum.push({
                  pointId: pointY.id,
                  pointCode: pointY.code,
                  measure_y: value,
                });
              });
            }
            pointZ = mawoiMemory.points.find(
              (p) =>
                p.code == point.description + "Z" ||
                p.code == point.description + "A",
            );
            if (pointZ) {
              point["NEXT_Z_W"].forEach((value) => {
                details.waveform.push({
                  pointId: pointZ.id,
                  pointCode: pointZ.code,
                  measure_y: value,
                });
              });
              point["NEXT_Z_S"].forEach((value) => {
                details.spectrum.push({
                  pointId: pointZ.id,
                  pointCode: pointZ.code,
                  measure_y: value,
                });
              });
            }
          });
          surveys.push(details);
        });
      });
      return surveys;
    }

    function createDivsFromMawois(mawoiData) {
      const containerData = document.getElementById("container-data");
      containerData.innerHTML = "";
      mawoiData.forEach((item) => {
        // Crear el contenedor principal para cada mawoi
        const mawoiDiv = document.createElement("div");
        mawoiDiv.className = "bg-white shadow-md rounded-lg p-4 mb-4";

        // Crear el elemento para mawoiId
        const mawoiIdDiv = document.createElement("div");
        mawoiIdDiv.className =
          "text-lg font-bold text-gray-800 min-w-[300px] max-w-[300px]";
        mawoiIdDiv.textContent = `Mawoi ${item.mawoiDescription} - ID: ${item.mawoiId}`;

        // Crear el elemento para la fecha
        const dateDiv = document.createElement("div");
        dateDiv.className = "text-sm text-gray-600";
        const date = new Date(item.date); // Convertir timestamp a fecha
        dateDiv.textContent = `Date: ${date.toLocaleString()}`;

        // Crear el contenedor para los puntos (poinst)
        const poinstDiv = document.createElement("div");
        poinstDiv.className = "mt-2";
        poinstDiv.innerHTML = `<span class="font-semibold">Poinst:</span> ${item.points.join(", ")}`;

        // Añadir los elementos al contenedor principal
        mawoiDiv.appendChild(mawoiIdDiv);
        mawoiDiv.appendChild(dateDiv);
        mawoiDiv.appendChild(poinstDiv);

        // Añadir el contenedor principal al DOM
        containerData.appendChild(mawoiDiv);
      });
    }

    async function syncSurveyInCloud() {
      const plantsStore = JSON.parse(localStorage.getItem("plants") || "[]");
      const mawoisForSync = [];
      plantsStore.forEach((plant) => {
        plant.areas.forEach((area) => {
          area.systems.forEach((system) => {
            system.mawois.forEach((mawoi) => {
              if (mawoi.id.toString().includes("9000")) {
                mawoisForSync.push({
                  ...mawoi,
                  systemId: system.id,
                });
              }
            });
          });
        });
      });

      if (mawoisForSync && mawoisForSync.length > 0) {
        const mawoisSync = mawoisForSync.map((mawoi) => {
          return {
            id: mawoi.id,
            mawoiId: +mawoi.id.toString().replace("9000", ""),
            typicalMawoiId: mawoi.typicalMawoiId,
            systemId: mawoi.systemId,
            code: mawoi.code,
            description: mawoi.description,
            points: mawoi.points,
          };
        });
        const token = localStorage.getItem("_token_") || "";
        const response = await fetch(URL_BACKEND + "/offline/mawois", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(mawoisSync),
        });
        const mawoisBD = (await response.json())?.data;
        plantsStore.forEach((plant) => {
          plant.areas.forEach((area) => {
            area.systems.forEach((system) => {
              system.mawois.forEach((mawoi) => {
                const mawoiFind = mawoisBD.find((mBD) => mBD.id == mawoi.id);
                if (mawoiFind) {
                  mawoi.id = mawoiFind.mawoiId;
                  mawoiFind.points.forEach((point, idx) => {
                    mawoi.points[idx].id = point.new;
                  });
                }
              });
            });
          });
        });

        localStorage.setItem("plants", JSON.stringify(plantsStore));

        createHierarchyList(plantsStore);

        const dataStore = await getMawoisWithCollectDataStore();

        dataStore.forEach((mawoi) => {
          const mawoiFind = mawoisBD.find((mBD) => mBD.id == mawoi.id);
          if (mawoiFind) {
            mawoi.id = mawoiFind.mawoiId;
            mawoi.points.forEach((point, idx) => {
              const pointFind = mawoiFind.points?.find((pBD) => {
                console.log(pBD.old);
                console.log(point.id);
                console.log(pBD.old == +point.id);
                return pBD.old == +point.id;
              });
              if (pointFind) {
                point.id = pointFind.new;
              }
            });
          }
        });

        await saveMawoisWithCollectDataStore(dataStore);
      }

      // #####################################################

      updateMessage("Syncing surveys...");
      // const token = localStorage.getItem("_token_") || "";
      if (!surveys || surveys.length == 0) {
        alert("No mawois with collect data");
        return;
      }
      showLoading();
      updateMessage("Syncing surveys...");
      const total = surveys.length;
      let current = 1;
      for (const survey of surveys) {
        try {
          showLoading();
          updateMessage(
            `Syncing survey ${survey.mawoiDescription}... \n Save surveys ${current}/${total}`,
          );
          const response = await fetch(URL_BACKEND + "/offline/survey", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify(survey),
          });
          const data = await response.json();
          if (data && data.response && data.response.httpCode === 500) {
            showAlert(`Error with Mawoi ID: ${survey.mawoiId}`);
            saveErrosMawois(
              `${survey.mawoiDescription} ${formatDate(new Date(survey.date))}`,
            );
            throw new Error("Server error");
          }
          if (!data.data) {
            alert("Session expired, please login again");
            localStorage.removeItem("_token_");
            window.location.href = "/";
            return;
          }
          // Aquí puedes manejar cualquier lógica adicional si es necesario
          // mawoisWith = mawoisWith.filter(
          //   (mawoi) => mawoi.plantId !== +plantSyncId,
          // );
          // saveMawoisWithCollectDataStore(mawoisWith);
        } catch (error) {
          console.error("Error:", error);
        } finally {
          hideLoading();
          hideModalSync();
          current++;
        }
      }
    }

    // Detectar tecla 'ESC'
    document.addEventListener("keydown", (event) => {
      if (loadingActive) return;
      if (event.key === "Escape") {
        // Verifica si la tecla presionada es 'Escape'
        hideModalSync();
      }
    });
  </script>
</div>
