---
import IconVariables from "../components/icons/config.astro";
---

<div class="">
  <button
    id="get-vars"
    class="flex hover:bg-blue-800 border-blue-800 hover:text-white text-blue-800 p-1 border-2 rounded-md bg-white"
    onclick="toggleCustomPopover()"
  >
    <IconVariables />
  </button>
  <!-- Popover -->
  <div
    id="popover"
    class="hidden absolute bg-blue-800 p-4 shadow-lg rounded-lg mt-2 text-sm text-white"
  >
    <div class="block min-w-[200px]">
      <div class="flex justify-around items-center py-2">
        <label for="ip" class="px-2">IP</label>
        <input
          type="text"
          id="ip"
          class="w-full text-blue-900 px-2 rounded-full focus:outline-none focus:ring-0 focus:border-transparent"
          value="192.168.4.1"
        />
      </div>
      <hr class="py-1" />
      <div class="flex justify-around items-center">
        <label for="rpm" class="px-2">RPM</label>
        <input
          type="number"
          id="rpm"
          class="w-full text-blue-900 px-2 rounded-full focus:outline-none focus:ring-0 focus:border-transparent"
          value="1800"
        />
      </div>
      <h3 class="p-2 text-lg font-bold">Spectrum</h3>
      <div class="flex justify-around items-center py-2">
        <label for="fmax" class="px-2">FMAX</label>
        <input
          type="number"
          id="fmax"
          class="w-full text-blue-900 px-2 rounded-full focus:outline-none focus:ring-0 focus:border-transparent"
          value="90000"
        />
      </div>
      <div class="flex items-center py-2">
        <label for="lines" class="px-2">LINES</label>
        <select
          id="lines"
          class="w-full text-blue-900 px-2 rounded-full focus:outline-none focus:ring-0 focus:border-transparent"
        >
          <option value="200">200</option>
          <option value="400">400</option>
          <option value="800">800</option>
          <option selected value="1600">1600</option>
          <option value="3200">3200</option>
          <option value="6400">6400</option>
          <option value="12800">12800</option>
        </select>
      </div>
      <h3 class="font-bold p-2 text-lg">Waveform</h3>
      <div class="flex justify-around items-center py-2">
        <label for="revolution" class="px-2">REV</label>
        <input
          type="number"
          id="revolution"
          class="w-full text-blue-900 px-2 rounded-full focus:outline-none focus:ring-0 focus:border-transparent"
          value="4"
          min="0"
          max="24"
        />
      </div>
      <div class="flex items-center py-2">
        <label for="samples" class="px-2">SAMPLES</label>
        <select
          id="samples"
          class="w-full text-blue-900 px-2 rounded-full focus:outline-none focus:ring-0 focus:border-transparent"
        >
          <option value="512">512</option>
          <option selected value="1024">1024</option>
          <option value="2048">2048</option>
          <option value="4096">4096</option>
          <option value="8192">8192</option>
          <option value="16384">16384</option>
          <option value="32768">32768</option>
        </select>
      </div>
      <!-- chechbox and input number -->
      <div class="flex gap-2 justify-evenly items-center">
        <label for="check_time" class="text-white font-medium text-sm"
          >waiting</label
        >
        <input
          type="checkbox"
          id="check_time"
          checked
          class="w-4 h-4 text-blue-900 rounded-full focus:outline-none focus:ring-0 focus:border-transparent"
          onchange="handleCheckboxChange(event)"
        />
        <select
          id="await_time"
          class="text-blue-900 px-2 rounded-full focus:outline-none focus:ring-0 focus:border-transparent w-[100px]"
        >
          <option value="5">5</option>
          <option selected value="10">10</option>
          <option value="15">15</option>
          <option value="20">20</option>
        </select>
      </div>
      <div class="p-2">
        <button
          onclick="saveVariables()"
          class="w-full bg-white hover:font-bold hover:bg-blue-200 text-blue-800 p-1 rounded-full"
        >
          Save
        </button>
      </div>
    </div>
  </div>
</div>
<style>
  #popover {
    position: absolute;
    z-index: 20;
    display: none;
  }

  #popover.visible {
    display: block;
  }
</style>
<script is:inline>
  const awaitTimeStorage = localStorage.getItem("awaitTime");
  if (!awaitTimeStorage) {
    const valueAwaitTime = document.getElementById("await_time").value;
    localStorage.setItem(
      "awaitTime",
      JSON.stringify({ value: valueAwaitTime, checked: true }),
    );
  }

  function handleCheckboxChange(event) {
    const checkTime = document.getElementById("check_time");
    const awaitTime = document.getElementById("await_time");

    awaitTime.disabled = !checkTime.checked;
  }

  function saveVariables() {
    const ip = document.getElementById("ip").value;
    const rpm = +document.getElementById("rpm").value;
    const fmax = +document.getElementById("fmax").value;
    const lines = +document.getElementById("lines").value;
    const revolution = +document.getElementById("revolution").value;
    const samples = +document.getElementById("samples").value;

    const valueAwaitTime = document.getElementById("await_time").value;
    const checkedAwaitTime = document.getElementById("check_time").checked;

    if (+revolution > 24 || +revolution < 0) {
      alert("Revolution must be between 0 and 24");
      return;
    }

    savePlantLastUpdatePoint(pointSelect.value, {
      ip,
      rpm,
      fmax,
      lines,
      revolution,
      samples,
    });

    localStorage.setItem(
      "setVariables",
      JSON.stringify({ ip, rpm, fmax, lines, revolution, samples }),
    );

    localStorage.setItem(
      "awaitTime",
      JSON.stringify({
        value: valueAwaitTime ?? 10,
        checked: checkedAwaitTime,
      }),
    );

    showLoading();
    updateMessage("Saving variables...");
    setTimeout(() => {
      hideLoading();
      toggleCustomPopover();
    }, 1000);
  }

  function setValuesForStorage() {
    const varStorage = localStorage.getItem("setVariables");
    const awaitTimeStorage = localStorage.getItem("awaitTime");
    if (varStorage) {
      const variables = JSON.parse(varStorage);
      document.getElementById("ip").value = variables.ip;
      document.getElementById("rpm").value = variables.rpm;
      document.getElementById("fmax").value = variables.fmax;
      document.getElementById("lines").value = variables.lines;
      document.getElementById("revolution").value = variables.revolution;
      document.getElementById("samples").value = variables.samples;
    }
    if (awaitTimeStorage) {
      const _awaitTime = JSON.parse(awaitTimeStorage);
      document.getElementById("await_time").value = _awaitTime.value;
      document.getElementById("await_time").disabled = !_awaitTime.checked;
      document.getElementById("check_time").checked = _awaitTime.checked;
    }
  }

  function setVariablesDefault() {
    const ip = document.getElementById("ip").value;
    const rpm = document.getElementById("rpm").value;
    const fmax = document.getElementById("fmax").value;
    const lines = document.getElementById("lines").value;
    const revolution = document.getElementById("revolution").value;
    const samples = document.getElementById("samples").value;

    const valueAwaitTime = document.getElementById("await_time").value;
    const checkedAwaitTime = document.getElementById("check_time").checked;

    localStorage.setItem(
      "setVariables",
      JSON.stringify({ ip, rpm, fmax, lines, revolution, samples }),
    );

    localStorage.setItem(
      "awaitTime",
      JSON.stringify({ value: valueAwaitTime, checked: checkedAwaitTime }),
    );
  }

  function adjustPopoverPosition() {
    const rect = popover.getBoundingClientRect();
    const viewportWidth = window.innerWidth;

    if (rect.right > viewportWidth) {
      // Si el popover se sale de la pantalla, moverlo hacia la izquierda
      popover.style.left = `${viewportWidth - rect.width - 30}px`;
    } else {
      // Restablecer posici√≥n si no se sale
      popover.style.left = "";
    }
  }
  function closeCustomPopover() {
    const popover = document.getElementById("popover");
    adjustPopoverPosition();
    if (popover.classList.contains("visible")) {
      popover.classList.remove("visible");
    }
  }
  function toggleCustomPopover() {
    const popover = document.getElementById("popover");
    popover.classList.toggle("visible");
    adjustPopoverPosition();
    setValuesForStorage();
  }
</script>
