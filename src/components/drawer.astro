---
import PopoverSetVar from "./popoverSetVar.astro";
import PopoverWaveform from "./popoverWaveform.astro";
import PopoverSpectrum from "./popoverSpectrum.astro";
import ButtonRemoveCollect from "./buttons/buttonRemoveCollect.astro";
import ButtonViewPhotos from "./buttons/buttonViewPhotos.astro";
---

<div class="drawer pt-2">
  <div class="flex justify-between p-2 w-full">
    <!-- name mawoi in h2 --->
    <div class="flex justify-start gap-1 flex-wrap max-w-[260px] sm:max-w-full">
      <div class="w-[250px]">
        <select id="mawoi-select" onchange="handleChangeMawoi()"></select>
      </div>
      <div class="w-[80px]">
        <select id="point-select" onchange="handleChangePoint()"></select>
      </div>
      <div class="w-[166px]">
        <select id="date-collect" onchange="handleChangeDate()"></select>
      </div>
    </div>
    <div class="flex justify-end gap-1 flex-wrap">
      <ButtonViewPhotos />
      <PopoverSetVar />
      <ButtonRemoveCollect />
    </div>
  </div>
  <hr />
  <div class="h-[520px]">
    <PopoverWaveform chartName="NEXT_X_W" />
    <div id="NEXT_X_W" class="h-[250px]"></div>
    <PopoverSpectrum chartName="NEXT_X_S" />
    <div id="NEXT_X_S" class="h-[250px]"></div>
  </div>
  <hr />

  <div class="h-[520px]">
    <PopoverWaveform chartName="NEXT_Y_W" />
    <div id="NEXT_Y_W" class="h-[250px]"></div>
    <PopoverSpectrum chartName="NEXT_Y_S" />
    <div id="NEXT_Y_S" class="h-[250px]"></div>
  </div>
  <hr />

  <div class="h-[520px]">
    <PopoverWaveform chartName="NEXT_Z_W" />
    <div id="NEXT_Z_W" class="h-[250px]"></div>
    <PopoverSpectrum chartName="NEXT_Z_S" />
    <div id="NEXT_Z_S" class="h-[250px]"></div>
  </div>
</div>
<style>
  select {
    @apply w-full rounded-md py-1 px-3 bg-white cursor-pointer border-2 border-blue-800 hover:border-blue-900 text-blue-800 mb-1;
    option {
      @apply bg-blue-500 text-sm text-white cursor-pointer hover:bg-blue-700;
    }
  }
</style>
<script is:inline>
  const pointSelect = document.getElementById("point-select");
  const mawoiSelect = document.getElementById("mawoi-select");
  const dateSelect = document.getElementById("date-collect");

  var MAWOI_SELECTED = null;

  var CHARTS = {
    NEXT_X_W: null,
    NEXT_X_S: null,
    NEXT_Y_W: null,
    NEXT_Y_S: null,
    NEXT_Z_W: null,
    NEXT_Z_S: null,
  };

  const options = OPTIONS_DRAW;
  const drawTitles = DRAW_TITLES;

  function drawAxios(eventActive, pointTemp = null) {
    let drawsStore = pointTemp || pointWithCollectData;
    if (drawsStore) {
      drawsStore[eventActive] = drawsStore[eventActive] || [];
    }

    const vars = drawsStore.vars;

    if (CHARTS[eventActive]) {
      CHARTS[eventActive].destroy();
    }

    const FMAX = vars.fmax;
    const nRevs = vars.revolution;
    const RPM = vars.rpm;
    const MIN_TO_SECONDS = 60000;

    if (drawsStore[eventActive] && drawsStore[eventActive].length > 0) {
      let title = drawTitles[eventActive];
      if (eventActive.includes("_S")) {
        if (UNIT_S == 2) {
          title = title.replace("Acc", "Vel");
        } else if (UNIT_S == 3) {
          title = title.replace("Acc", "Disp");
        }
      } else if (eventActive.includes("_W")) {
        if (UNIT_W == 2) {
          title = title.replace("Acc", "Vel");
        } else if (UNIT_W == 3) {
          title = title.replace("Acc", "Disp");
        }
      }

      const configStore = getSystemConfigStore();

      options.title.text = title;
      options.container = document.getElementById(eventActive);
      options.data = drawsStore[eventActive].map((valueY, index) => {
        let y = valueY;
        let x = eventActive.includes("_S")
          ? (index * FMAX) / drawsStore[eventActive].length
          : (index * MIN_TO_SECONDS * nRevs) /
            (RPM * drawsStore[eventActive].length);

        if (configStore.frequency == 1) {
          x = x / 60; // Convert to Hertz
        }

        if (configStore.amplitude == 1) {
          y = y * 25.4; // Convert to metric
        }

        const factorMap = {
          1: 0.5,
          3: 0.35355,
        };

        const unitType = eventActive.includes("_S") ? UNIT_S : UNIT_W;
        let typeKey;

        if (unitType === 1) {
          typeKey = "acc_type";
        } else if (unitType === 2) {
          typeKey = "vel_type";
        } else if (unitType === 3) {
          typeKey = "dis_type";
        }

        if (typeKey && factorMap[configStore[typeKey]]) {
          y *= factorMap[configStore[typeKey]];
        }

        return {
          y,
          x,
        };
      });
      CHARTS[eventActive] = agCharts.AgCharts.create({ ...options });
    }
  }

  function drawSimpleClear(title) {
    if (CHARTS[title]) {
      CHARTS[title].destroy();
      CHARTS[title] = null;
    }
  }

  function drawClear() {
    drawSimpleClear("NEXT_X_W");
    drawSimpleClear("NEXT_X_S");
    drawSimpleClear("NEXT_Y_W");
    drawSimpleClear("NEXT_Y_S");
    drawSimpleClear("NEXT_Z_W");
    drawSimpleClear("NEXT_Z_S");
  }

  async function setInformationMawoi(
    { code, description, id, points },
    system,
    plant,
  ) {
    MAWOI_SELECTED = {
      code,
      description,
      id,
      plantId: plant.id,
      points,
    };

    // Actualizar opciones de MAWOI
    mawoiSelect.innerHTML = "";
    const mawoisCode = system.mawois.reduce((acc, mawoi) => {
      const idx = acc.findIndex((p) => p.id === mawoi.id);
      if (idx < 0) {
        acc.push({
          id: mawoi.id,
          code: `${mawoi.code} ${mawoi.description}`,
        });
      }
      return acc;
    }, []);
    mawoisCode.forEach((mawoi) => {
      const option = document.createElement("option");
      option.value = mawoi.id;
      option.text = mawoi.code;
      option.selected = mawoi.id == id;
      mawoiSelect.appendChild(option);
    });

    // Actualizar opciones de puntos
    pointSelect.innerHTML = "";
    const pointsCode = points.reduce((acc, point) => {
      const codePoint = point.code.slice(0, 2); // Simplificado para obtener los primeros 2 caracteres
      const idx = acc.findIndex((p) => p.code === codePoint);
      if (idx < 0) {
        acc.push({
          id: point.id,
          code: codePoint,
        });
      }
      return acc;
    }, []);

    for (const point of pointsCode) {
      const pointStore = await findPointInCollectData(point.id); // Esperar la resolución de la consulta
      const existPointStore = pointStore?.point ? true : false;

      const option = document.createElement("option");
      option.value = point.id;
      option.text = point.code;
      if (existPointStore) {
        option.selected = true;
      }
      pointSelect.appendChild(option);
    }

    // Obtener el punto seleccionado por defecto
    const pointIdDefault = pointSelect.value;

    // Obtener información del punto y almacenarla en localStorage
    const pointOfPlant = findPointForCollectData(pointIdDefault);
    if (pointOfPlant?.point) {
      const {
        rpm,
        varFmax: fmax,
        varLines: lines,
        varRev: revolution,
        varSamples: samples,
      } = pointOfPlant.point;
      localStorage.setItem(
        "setVariables",
        JSON.stringify({
          rpm,
          fmax,
          lines,
          revolution,
          samples,
        }),
      );
    }

    // Dibujar en base al punto seleccionado
    await drawByPointId(pointIdDefault);

    // Establecer la fecha usando el MAWOI ID y el punto seleccionado
    await setDateByMawoiId(id, pointIdDefault);
  }

  function handleChangePoint() {
    closeCustomPopover();
    if (timeOutChangeMawoiOrPoint) {
      clearTimeout(timeOutChangeMawoiOrPoint);
    }
    const pointId = pointSelect.value;
    const pointOfPlant = findPointForCollectData(pointId);
    if (pointOfPlant && pointOfPlant.point) {
      const {
        rpm,
        varFmax: fmax,
        varLines: lines,
        varRev: revolution,
        varSamples: samples,
      } = pointOfPlant.point;
      localStorage.setItem(
        "setVariables",
        JSON.stringify({
          rpm,
          fmax,
          lines,
          revolution,
          samples,
        }),
      );
    }
    drawByPointId(pointId);
    setDateByMawoiId(MAWOI_SELECTED.id, pointId);
  }

  async function handleChangeMawoi() {
    closeCustomPopover();
    if (timeOutChangeMawoiOrPoint) {
      clearTimeout(timeOutChangeMawoiOrPoint);
    }

    const mawoiId = mawoiSelect.value;
    const mawoiFind = findMawoiForCollectData(mawoiId);
    localStorage.setItem("mawoiSelected", JSON.stringify(mawoiFind.mawoi));

    await setInformationMawoi(
      mawoiFind.mawoi,
      mawoiFind.system,
      mawoiFind.plant,
    );
  }

  function handleChangeDate() {
    closeCustomPopover();
    if (timeOutChangeMawoiOrPoint) {
      clearTimeout(timeOutChangeMawoiOrPoint);
    }
    const date = dateSelect.value;
    drawByPointId(pointSelect.value, date);
  }

  async function findPointInCollectData(pointId) {
    let mawoisWithData = await getMawoisWithCollectDataStore();
    for (let mawoi of mawoisWithData) {
      // order points by date desc
      const points = mawoi.points.sort((a, b) => b.date - a.date);
      for (let point of points) {
        if (point.id == pointId) {
          return { mawoi, point };
        }
      }
    }
    return null;
  }

  async function setDateByMawoiId(id, pointIdDefault) {
    const dateCollect = document.getElementById("date-collect");
    dateCollect.innerHTML = "";
    let mawoisWithData = await getMawoisWithCollectDataStore();
    const mawoiStore = mawoisWithData.find((mawoi) => mawoi.id == id);
    if (mawoiStore) {
      const dates = mawoiStore.points
        .filter((point) => point.id == pointIdDefault)
        .map((point) => point.date);
      if (dates && dates.length > 0) {
        dates
          .sort((a, b) => b - a)
          .forEach((date) => {
            const option = document.createElement("option");
            option.value = date;
            option.text = formatDate(new Date(date));
            dateCollect.appendChild(option);
          });
      } else {
        const option = document.createElement("option");
        option.value = null;
        option.text = formatDate(new Date());
        dateCollect.appendChild(option);
      }
    } else {
      const option = document.createElement("option");
      option.value = null;
      option.text = formatDate(new Date());
      dateCollect.appendChild(option);
    }
  }

  async function drawByPointId(pointId, date) {
    let mawoisStore = await getMawoisWithCollectDataStore();
    if (mawoisStore && mawoisStore.length > 0) {
      const mawoiStore = mawoisStore.find(
        (mawoi) => mawoi.id == MAWOI_SELECTED.id,
      );
      if (mawoiStore) {
        const pointStore = mawoiStore.points
          .sort((a, b) => b.date - a.date)
          .find((point) => {
            return point.id == pointId && (date ? point.date == date : true);
          });
        if (pointStore) {
          showLoading();
          drawClear();
          drawAxios("NEXT_X_W", pointStore);
          setTimeout(() => {
            drawAxios("NEXT_X_S", pointStore);
            setTimeout(() => {
              drawAxios("NEXT_Y_W", pointStore);
              setTimeout(() => {
                drawAxios("NEXT_Y_S", pointStore);
                setTimeout(() => {
                  drawAxios("NEXT_Z_W", pointStore);
                  setTimeout(() => {
                    drawAxios("NEXT_Z_S", pointStore);
                    hideLoading();
                  }, 500);
                }, 400);
              }, 300);
            }, 200);
          }, 100);
        } else {
          drawClear();
        }
      } else {
        drawClear();
      }
    }
  }

  async function drawIfExists() {
    let mawoiSelectedStore = localStorage.getItem("mawoiSelected") || null;
    if (mawoiSelectedStore) {
      mawoiSelectedStore = JSON.parse(mawoiSelectedStore);
      if (mawoiSelectedStore) {
        MAWOI_SELECTED = mawoiSelectedStore;
        const hierarchy = findMawoiForCollectData(MAWOI_SELECTED.id);
        if (hierarchy && hierarchy.system) {
          await setInformationMawoi(
            MAWOI_SELECTED,
            hierarchy.system,
            hierarchy.plant,
          );
        }
      }
    }
  }

  function formatDate(date) {
    const day = String(date.getDate()).padStart(2, "0"); // Día con 2 dígitos
    const month = String(date.getMonth() + 1).padStart(2, "0"); // Mes con 2 dígitos (getMonth() empieza en 0)
    const year = String(date.getFullYear()).slice(-2); // Tomamos solo los últimos 2 dígitos del año
    const hours = String(date.getHours()).padStart(2, "0"); // Horas con 2 dígitos
    const minutes = String(date.getMinutes()).padStart(2, "0"); // Minutos con 2 dígitos

    return `${day}/${month}/${year} ${hours}:${minutes}`;
  }

  drawIfExists();

  function showImages() {
    if (!MAWOI_SELECTED || !MAWOI_SELECTED.id) {
      alert("Please select a mawoi");
      return;
    }
    showModalPictures();
  }
</script>
