<div class="">
  <h1>ESP32 Web BLE Application</h1>
  <button id="connectBleButton">Connect to BLE Device</button>
  <button id="disconnectBleButton">Disconnect BLE Device</button>
  <p>
    BLE state: <strong
      ><span id="bleState" style="color:#d13a30;">Disconnected</span></strong
    >
  </p>
  <button id="onButton">ON</button>
  <button id="offButton">OFF</button>
</div>

<style>
  button {
    @apply rounded-full border-2 border-blue-700 p-3;
  }
</style>

<script is:inline>
  // DOM Elements
  const connectButton = document.getElementById("connectBleButton");
  const disconnectButton = document.getElementById("disconnectBleButton");
  const onButton = document.getElementById("onButton");
  const offButton = document.getElementById("offButton");
  const retrievedValue = document.getElementById("valueContainer");
  const latestValueSent = document.getElementById("valueSent");
  const bleStateContainer = document.getElementById("bleState");
  const timestampContainer = document.getElementById("timestamp");

  //Define BLE Device Specs
  var deviceName = "ESP32_BLE";
  var bleService = "91bad492-b950-4226-aa2b-4ede9fa42f59";
  var ledCharacteristic = "cba1d466-344c-4be3-ab3f-189f80dd7518";
  var sensorCharacteristic = "19b10001-e8f2-537e-4f6c-d104768a1214";

  var currentDataType = null; // 'time_domain' o 'frequency_domain'
  var partialDataBuffer = new ArrayBuffer(0);
  var timeDomainData = [];
  var frequencyDomainData = [];
  var markers = [
    "END",
    "TIME_DOMAIN",
    "END_TIME_DOMAIN",
    "FREQUENCY_DOMAIN",
    "END_FREQUENCY_DOMAIN",
  ];

  //Global Variables to Handle Bluetooth
  var bleServer;
  var bleServiceFound;
  var sensorCharacteristicFound;

  // Función para concatenar dos ArrayBuffers
  function concatBuffers(buffer1, buffer2) {
    const totalLength = buffer1.byteLength + buffer2.byteLength;
    const resultBuffer = new Uint8Array(totalLength);

    // Copiar el primer buffer
    resultBuffer.set(new Uint8Array(buffer1), 0);
    // Copiar el segundo buffer
    resultBuffer.set(new Uint8Array(buffer2), buffer1.byteLength);

    return resultBuffer.buffer; // Devuelve el ArrayBuffer resultante
  }

  // Connect Button (search for BLE Devices only if BLE is available)
  connectButton.addEventListener("click", (event) => {
    if (isWebBluetoothEnabled()) {
      connectToDevice();
    }
  });

  // Disconnect Button
  disconnectButton.addEventListener("click", disconnectDevice);

  // Write to the ESP32 LED Characteristic
  onButton.addEventListener("click", () => {
    writeOnCharacteristic("NEXT_X");
    setTimeout(() => {
      writeOnCharacteristic("NEXT_Y");
      setTimeout(() => {
        writeOnCharacteristic("NEXT_Z");
      }, 15000);
    }, 15000);
  });
  offButton.addEventListener("click", () => {
    alertDrawer();
  });

  // Check if BLE is available in your Browser
  function isWebBluetoothEnabled() {
    if (!navigator.bluetooth) {
      console.log("Web Bluetooth API is not available in this browser!");
      bleStateContainer.innerHTML =
        "Web Bluetooth API is not available in this browser!";
      return false;
    }
    console.log("Web Bluetooth API supported in this browser.");
    return true;
  }

  async function requestDevice() {
    return await navigator.bluetooth.requestDevice({
      filters: [{ name: deviceName }],
      optionalServices: [bleService],
    });
  }

  async function selectDevice(device) {
    console.log("Device Selected:", device.name);
    bleStateContainer.innerHTML = "Connected to device " + device.name;
    bleStateContainer.style.color = "#24af37";
    device.addEventListener("gattservicedisconnected", onDisconnected);
    return await device.gatt.connect();
  }

  async function connectDevice(gattServer) {
    bleServer = gattServer;
    console.log("Connected to GATT Server");
    return await bleServer.getPrimaryService(bleService);
  }

  async function getCharacteristic(service) {
    bleServiceFound = service;
    console.log("Service discovered:", service.uuid);
    return await service.getCharacteristic(ledCharacteristic);
  }

  async function getCharacteristicValue(characteristic) {
    console.log("Characteristic discovered:", characteristic.uuid);
    sensorCharacteristicFound = characteristic;
    characteristic.addEventListener(
      "characteristicvaluechanged",
      handleCharacteristicChange,
    );
    characteristic.startNotifications();
    console.log("Notifications Started.");
    return await characteristic.readValue();
  }

  async function getDecodedValue(value) {
    const decodedValue = new TextDecoder("utf-8").decode(value.buffer);
    console.log("Decoded value: ", decodedValue);
    return decodedValue;
  }

  // Connect to BLE Device and Enable Notifications
  async function connectToDevice() {
    console.log("Initializing Bluetooth...");
    let device = null;
    try {
      device = await requestDevice();
      const gattServer = await selectDevice(device);
      const service = await connectDevice(gattServer);
      console.log("Service connected:", service.uuid);
      const characteristic = await getCharacteristic(service);
      const value = await getCharacteristicValue(characteristic);
      retrievedValue.innerHTML = await getDecodedValue(value);
    } catch (error) {
      console.log(error);
    }
  }

  function onDisconnected(event) {
    console.log("Device Disconnected:", event.target.device.name);
    bleStateContainer.innerHTML = "Device disconnected";
    bleStateContainer.style.color = "#d13a30";

    connectToDevice();
  }

  function handleCharacteristicChange(event) {
    let message;
    const data = event.target.value;

    try {
      message = new TextDecoder("utf-8").decode(data);
    } catch (_) {
      message = null;
    }

    if (message && markers.includes(message)) {
      if (message === "TIME_DOMAIN") {
        console.time("collect data");
        console.log("Inicio de datos en el dominio del tiempo.");
        currentDataType = "time_domain";
        timeDomainData = [];
        partialDataBuffer = new ArrayBuffer(0);
      } else if (message === "END_TIME_DOMAIN") {
        console.log("Fin de datos en el dominio del tiempo.");
        currentDataType = null;
        partialDataBuffer = new ArrayBuffer(0);
      } else if (message === "FREQUENCY_DOMAIN") {
        console.log("Inicio de datos en el dominio de la frecuencia.");
        currentDataType = "frequency_domain";
        frequencyDomainData = [];
        partialDataBuffer = new ArrayBuffer(0);
      } else if (message === "END_FREQUENCY_DOMAIN") {
        console.log("Fin de datos en el dominio de la frecuencia.");
        currentDataType = null;
        partialDataBuffer = new ArrayBuffer(0);
        receivingData = false;
        console.timeEnd("collect data");
      }
    } else {
      // Asumir que son datos binarios
      if (
        currentDataType === "time_domain" ||
        currentDataType === "frequency_domain"
      ) {
        partialDataBuffer = concatBuffers(partialDataBuffer, data.buffer);

        // Desempaquetar los doubles cuando tengamos suficientes bytes
        while (partialDataBuffer.byteLength >= 8) {
          const chunk = partialDataBuffer.slice(0, 8);
          partialDataBuffer = partialDataBuffer.slice(8);

          const miniDataView = new DataView(chunk);

          const value = miniDataView.getFloat64(0, true);

          if (currentDataType === "time_domain") {
            timeDomainData.push(value);
          } else if (currentDataType === "frequency_domain") {
            frequencyDomainData.push(value);
          }
        }
      } else {
        console.log("Datos binarios recibidos sin tipo específico. Ignorando.");
      }
    }
  }

  function writeOnCharacteristic(value) {
    if (bleServer && bleServer.connected) {
      bleServiceFound
        .getCharacteristic(sensorCharacteristic)
        .then((characteristic) => {
          console.log("Found the LED characteristic: ", characteristic.uuid);
          const data = new TextEncoder("utf-8").encode(value);
          return characteristic.writeValue(data);
        })
        .then(() => {
          console.log("Value written to characteristic:", value);
        })
        .catch((error) => {
          console.error("Error writing to the LED characteristic: ", error);
        });
    } else {
      console.error(
        "Bluetooth is not connected. Cannot write to characteristic.",
      );
      window.alert(
        "Bluetooth is not connected. Cannot write to characteristic. \n Connect to BLE first!",
      );
    }
  }

  function disconnectDevice() {
    console.log("Disconnect Device.");
    if (bleServer && bleServer.connected) {
      if (sensorCharacteristicFound) {
        sensorCharacteristicFound
          .stopNotifications()
          .then(() => {
            console.log("Notifications Stopped");
            return bleServer.disconnect();
          })
          .then(() => {
            console.log("Device Disconnected");
            bleStateContainer.innerHTML = "Device Disconnected";
            bleStateContainer.style.color = "#d13a30";
          })
          .catch((error) => {
            console.log("An error occurred:", error);
          });
      } else {
        console.log("No characteristic found to disconnect.");
      }
    } else {
      // Throw an error if Bluetooth is not connected
      console.error("Bluetooth is not connected.");
      window.alert("Bluetooth is not connected.");
    }
  }

  function getDateTime() {
    var currentdate = new Date();
    var day = ("00" + currentdate.getDate()).slice(-2); // Convert day to string and slice
    var month = ("00" + (currentdate.getMonth() + 1)).slice(-2);
    var year = currentdate.getFullYear();
    var hours = ("00" + currentdate.getHours()).slice(-2);
    var minutes = ("00" + currentdate.getMinutes()).slice(-2);
    var seconds = ("00" + currentdate.getSeconds()).slice(-2);

    var datetime =
      day +
      "/" +
      month +
      "/" +
      year +
      " at " +
      hours +
      ":" +
      minutes +
      ":" +
      seconds;
    return datetime;
  }
</script>
