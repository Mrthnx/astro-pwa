<div
  id="modal-select-plant"
  class="fixed inset-0 flex flex-col items-center justify-center bg-black bg-opacity-50 z-20 hidden"
>
  <div
    class="bg-white rounded-lg p-4 w-10/12 max-w-md h-[70vh] overflow-y-auto"
  >
    <table id="table-select-plant" class="w-full">
      <thead>
        <tr>
          <th class="text-center">Account</th>
          <th class="text-center">Plant</th>
        </tr>
        <tr>
          <th>
            <input
              id="search-account"
              type="text"
              class="w-full p-2 text-sm border-gray-200 outline-none"
              placeholder="Search account"
            />
          </th>
          <th>
            <input
              id="search-plant"
              type="text"
              class="w-full p-2 text-sm border-gray-200 outline-none"
              placeholder="Search plant"
            />
          </th>
        </tr>
      </thead>
      <tbody id="tbody-select-plant"> </tbody>
    </table>
  </div>
  <script is:inline>
    const $modalSelectPlant = document.getElementById("modal-select-plant");
    const $tableSelectPlant = document.getElementById("table-select-plant");
    const $searchAccount = document.getElementById("search-account");
    const $searchPlant = document.getElementById("search-plant");
    let modalIsOpen = false;
    let typingTimer;

    if ($searchAccount) {
      $searchAccount.addEventListener("keyup", function (event) {
        clearTimeout(typingTimer);
        const account = event.target.value;
        let plant = "";
        if ($searchPlant) {
          plant = $searchPlant.value;
        }
        typingTimer = setTimeout(() => {
          getPlants(account, plant);
        }, 400);
      });
    }

    if ($searchPlant) {
      $searchPlant.addEventListener("keyup", function (event) {
        clearTimeout(typingTimer);
        const plantSearch = event.target.value;
        let account = "";
        if ($searchAccount) {
          account = $searchAccount.value;
        }
        typingTimer = setTimeout(() => {
          getPlants(account, plantSearch);
        }, 400);
      });
    }

    function hideModalPlants() {
      modalIsOpen = false;
      $modalSelectPlant?.classList.add("hidden");
      hideLoading();
    }
    function showModalPlants() {
      setTimeout(() => {
        modalIsOpen = true;
      }, 100);
      $modalSelectPlant?.classList.remove("hidden");
      getPlants();
    }

    function addPlantInStorage(plantId) {
      const plantsStore = localStorage.getItem("plants") || "[]";
      if (plantsStore) {
        let plants = JSON.parse(plantsStore);
        plants = plants.filter(Boolean);
        if (plants.length >= 5) {
          alert("You cannot add more than 5 plants");
          hideModalPlants();
          return;
        }
        const idx = plants.findIndex((plant) => plant.id == plantId);
        if (idx >= 0) {
          alert("This plant is already added");
          hideModalPlants();
          return;
        }
        showLoading();
        const token = localStorage.getItem("_token_") || "";
        fetch(URL_BACKEND + "/offline/points/" + plantId, {
          method: "GET",
          headers: {
            Authorization: "Bearer " + token,
          },
        })
          .then((response) => response.json())
          .then((data) => {
            if (!!data.ok && data.ok == false) {
              if (data.response && data.response.status == 500) {
                alert("Server error, please try again later");
                throw new Error("Server error");
              }
              return null;
            }
            return data.data;
          })
          .then((data) => {
            if (!data) {
              alert("Session expired, please login again");
              localStorage.removeItem("_token_");
              window.location.href = "/";
              return;
            }
            const plant = data[0];
            plants.push(plant);
            localStorage.setItem(
              "plants",
              JSON.stringify(plants.filter(Boolean)),
            );
            return plant;
          })
          .then(async (plant) => {
            for (let area of plant.areas) {
              for (let system of area.systems) {
                for (let mawoi of system.mawois) {
                  await downloadAndSaveImages(mawoi.id, mawoi.images);
                }
              }
            }
          })
          .finally(() => {
            const plantsStore = localStorage.getItem("plants") || "[]";
            createHierarchyList(JSON.parse(plantsStore));
            hideModalPlants();
            hideLoading();
            // window.location.reload();
          });
      }
    }

    function processRows() {
      document.querySelectorAll("tr[data-name]").forEach((tr) => {
        tr.addEventListener("click", function () {
          const plantId = this.getAttribute("data-name");
          addPlantInStorage(plantId);
        });
      });
    }

    function getPlants(account = "", plantSearch = "") {
      showLoading();
      const token = localStorage.getItem("_token_") || "";
      fetch(
        URL_BACKEND +
          "/offline/plants?account=" +
          account +
          "&plant=" +
          plantSearch,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer " + token,
          },
        },
      )
        .then((response) => response.json())
        .then((data) => {
          if (!!data.ok && data.ok == false) {
            if (data.response && data.response.status == 500) {
              alert("Server error, please try again later");
              throw new Error("Server error");
            }
            return null;
          }
          return data.data;
        })
        .then((data) => {
          if (!data) {
            alert("Session expired, please login again");
            localStorage.removeItem("_token_");
            window.location.href = "/";
            return;
          }

          const $tbody = document.getElementById("tbody-select-plant");
          $tbody.innerHTML = "";
          data.forEach((plant) => {
            const $tr = document.createElement("tr");
            const $td1 = document.createElement("td");
            const $td2 = document.createElement("td");
            $tr.className = "border-b border-gray-200 cursor-pointer py-2";
            $tr.dataset.name = plant.id;
            $td1.className = "text-left text-sm";
            $td2.className = "text-left text-sm";
            $td1.textContent = plant.account.description;
            $td2.textContent = plant.description;
            $tr.appendChild($td1);
            $tr.appendChild($td2);
            $tbody.appendChild($tr);
          });

          processRows();
        })
        .finally(() => {
          hideLoading();
        });
    }

    document.addEventListener("click", (event) => {
      // Verificar si el clic fue fuera del div
      if (loadingActive) return;
      if (
        modalIsOpen &&
        $tableSelectPlant &&
        !$tableSelectPlant.contains(event.target)
      ) {
        console.log("click out of modal");
        hideModalPlants();
      }
    });

    // Detectar tecla 'ESC'
    document.addEventListener("keydown", (event) => {
      if (loadingActive) return;
      if (event.key === "Escape") {
        // Verifica si la tecla presionada es 'Escape'
        hideModalPlants();
      }
    });

    function openDatabase() {
      return new Promise((resolve, reject) => {
        const request = indexedDB.open("imageDatabase", 1);

        request.onupgradeneeded = function (event) {
          const db = event.target.result;
          if (!db.objectStoreNames.contains("images")) {
            db.createObjectStore("images", { keyPath: "id" });
          }
        };

        request.onsuccess = function (event) {
          resolve(event.target.result);
        };

        request.onerror = function (event) {
          reject("Error opening database:", event.target.errorCode);
        };
      });
    }

    function saveImageToIndexedDB(db, id, images) {
      return new Promise((resolve, reject) => {
        const transaction = db.transaction(["images"], "readwrite");
        const store = transaction.objectStore("images");

        const request = store.put({ id, images });

        request.onsuccess = function () {
          resolve(`Image saved successfully ${id}`);
        };

        request.onerror = function (event) {
          reject(`Error saving image: ${id} - ${event.target.errorCode}`);
        };
      });
    }

    async function fetchImage(url) {
      const response = await fetch(url);
      if (!response.ok) {
        throw new Error(`Failed to fetch image: ${url}`);
      }
      return await response.blob(); // Convertir la imagen a Blob
    }

    async function downloadAndSaveImages(id, urls) {
      const db = await openDatabase(); // Abrir la base de datos
      try {
        const images = [];
        for (let url of urls) {
          const blob = await fetchImage(url);
          images.push(blob);
        }
        await saveImageToIndexedDB(db, id, images); // Guardar en IndexedDB
      } catch (error) {
        console.error(error);
      }
    }
  </script>
</div>
