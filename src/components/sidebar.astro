---
import SwitchBluetooth from "./switchBluetooth.astro";
import ButtonCollectData from "./buttons/buttonCollectData.astro";
import ButtonBatery from "./buttons/buttoBatery.astro";
import ButtonLogout from "./buttons/buttonLogout.astro";
import ButtonSystemConfig from "./buttons/buttonSystemConfig.astro";
import ButtonOveralls from "./buttons/buttonOveralls.astro";
import * as packageJson from "../../package.json";

const VERSION = packageJson.version;
---

<!-- Navbar -->
<nav
  class="bg-gray-100 text-blue-900 p-4 flex justify-between items-center top-0 left-0 w-full z-10"
>
  <div class="hidden lg:flex gap-8">
    <button id="menu-button" class="focus:outline-none">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-6 w-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
        stroke-width="2"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M4 6h16M4 12h16m-7 6h7"></path>
      </svg>
    </button>
  </div>

  <ButtonCollectData />

  <div class="flex text-2xl justify-center items-end gap-2">
    <!-- <ButtonOveralls /> -->
    <div>
      <button
        class="w-full flex justify-center items-center"
        id="overalls"
        onclick="openMenu()"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="inline-block mr-2 align-top"
          width="30"
          height="30"
          viewBox="0 0 24 24"
          fill="none"
          stroke="#000000"
          stroke-width="1"
          stroke-linecap="round"
          stroke-linejoin="round"
        >
          <!-- Overalls body -->
          <rect
            x="6"
            y="8"
            width="12"
            height="10"
            rx="2"
            fill="#e0e7ef"
            stroke="#000"></rect>
          <!-- Overalls bib -->
          <rect
            x="9"
            y="4"
            width="6"
            height="6"
            rx="1"
            fill="#b6c4d6"
            stroke="#000"></rect>
          <!-- Left strap -->
          <rect
            x="7"
            y="2"
            width="2"
            height="6"
            rx="1"
            fill="#b6c4d6"
            stroke="#000"></rect>
          <!-- Right strap -->
          <rect
            x="15"
            y="2"
            width="2"
            height="6"
            rx="1"
            fill="#b6c4d6"
            stroke="#000"></rect>
          <!-- Left pocket -->
          <rect
            x="8"
            y="13"
            width="2"
            height="3"
            rx="0.5"
            fill="#fff"
            stroke="#000"></rect>
          <!-- Right pocket -->
          <rect
            x="14"
            y="13"
            width="2"
            height="3"
            rx="0.5"
            fill="#fff"
            stroke="#000"></rect>
          <!-- Bib button left -->
          <circle cx="8" cy="6" r="0.5" fill="#000"></circle>
          <!-- Bib button right -->
          <circle cx="16" cy="6" r="0.5" fill="#000"></circle>
        </svg>
        <span class="text-sm"></span>
      </button>
    </div>
    <ButtonBatery />
    <div class="hidden lg:block">
      Corel Force
      <span class="text-sm"> {VERSION}</span>
    </div>
  </div>

  <div class="block lg:hidden">
    <ButtonCollectData />
  </div>
  <!-- <SwitchBluetooth /> -->
</nav>
<div class="flex">
  <!-- Sidebar -->
  <div
    id="sidebar"
    class="z-20 fixed left-0 w-64 h-full bg-gray-100 text-blue-900 sidebar overflow-y-auto"
  >
    <!-- Menús -->
    <ul id="plants-container"></ul>

    <div class="flex justify-center items-center">
      <div id="div-button-add-plant" class="p-4">
        <button
          id="add-plant"
          class="border-blue-900 rounded-md border-2 px-4 py-1 text-blue-900 hover:bg-blue-800 hover:text-white"
        >
          Add Plant
        </button>
      </div>
    </div>

    <div class="flex relative -bottom-10 justify-center items-end">
      <ButtonSystemConfig />
      <ButtonLogout />
    </div>

    <br />
  </div>
</div>
<style>
  /* Custom styles for sidebar */
  .sidebar {
    transform: translateX(-100%);
    transition: transform 0.3s ease-in-out;
  }

  .sidebar-open {
    transform: translateX(0);
  }

  .no-select {
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }
</style>
<script is:inline>
  // Función para mostrar u ocultar el sidebar
  const menuButton = document.getElementById("menu-button");
  const sidebar = document.getElementById("sidebar");
  const divButton = document.getElementById("div-button-add-plant");
  let sidebarIsOpen = false;

  document.addEventListener("click", (event) => {
    // Verificar si el clic fue fuera del div
    if (
      !sidebar.contains(event.target) &&
      !menuButton.contains(event.target) &&
      sidebarIsOpen
    ) {
      if (sidebar.classList.contains("sidebar-open")) {
        sidebar.classList.remove("sidebar-open");
        sidebarIsOpen = false;
      }
    }
  });

  // let touchStartX = 0;
  // let touchStartY = 0;
  //
  // document.addEventListener("touchstart", function (e) {
  //   if (e.touches[0].clientX < 40) {
  //     // Solo si empieza cerca del borde izquierdo
  //     touchStartX = e.touches[0].clientX;
  //     touchStartY = e.touches[0].clientY;
  //   }
  // });
  //
  // document.addEventListener("touchend", function (e) {
  //   const touchEndX = e.changedTouches[0].clientX;
  //   const touchEndY = e.changedTouches[0].clientY;
  //   const diffX = touchEndX - touchStartX;
  //   const diffY = Math.abs(touchEndY - touchStartY);
  //
  //   if (touchStartX < 40 && diffX > 50 && diffY < 30) {
  //     setTimeout(() => {
  //       sidebarIsOpen = true;
  //     }, 50);
  //     sidebar.classList.toggle("sidebar-open");
  //   }
  // });

  menuButton.addEventListener("click", () => {
    setTimeout(() => {
      sidebarIsOpen = !sidebarIsOpen;
    }, 50);
    sidebar.classList.toggle("sidebar-open");
  });

  function openMenu() {
    if (sidebarIsOpen) {
      return;
    }
    setTimeout(() => {
      sidebarIsOpen = true;
    }, 50);
    sidebar.classList.toggle("sidebar-open");
  }

  function removePlant(id) {
    if (isStatusOnline) {
      const plantId = id.split("-")[1];
      const plantsStore = localStorage.getItem("plants") || "[]";
      if (plantsStore) {
        let plants = JSON.parse(plantsStore);
        plants = plants.filter(Boolean);
        const idx = plants.findIndex((plant) => plant.id == plantId);
        if (idx >= 0) {
          plants.splice(idx, 1);
          localStorage.setItem(
            "plants",
            JSON.stringify(plants.filter(Boolean)),
          );
          createHierarchyList(plants.filter(Boolean));
        }
      }
      // window.location.reload();
    }
  }

  function findMawoiForCollectData(id) {
    let plantsStore = localStorage.getItem("plants") || "[]";
    plantsStore = JSON.parse(plantsStore);
    for (let plant of plantsStore) {
      for (let area of plant.areas) {
        for (let system of area.systems) {
          for (let mawoi of system.mawois) {
            if (mawoi.id == id) {
              return {
                mawoi,
                system,
                plant,
              }; // Termina la función si encuentra el mawoi
            }
          }
        }
      }
    }
    return null;
  }

  function findSystemForCollectData(id) {
    let plantsStore = localStorage.getItem("plants") || "[]";
    plantsStore = JSON.parse(plantsStore);
    for (let plant of plantsStore) {
      for (let area of plant.areas) {
        for (let system of area.systems) {
          if (system.id == id) {
            return {
              system,
              plant,
            }; // Termina la función si encuentra el mawoi
          }
        }
      }
    }
    return null;
  }

  function savePlantLastUpdatePoint(pointId, vars) {
    let plantsStore = localStorage.getItem("plants") || "[]";
    plantsStore = JSON.parse(plantsStore);
    plantsStore = plantsStore.map((plant) => {
      plant.areas.map((area) => {
        area.systems.map((system) => {
          system.mawois.map((mawoi) => {
            mawoi.points.map((point) => {
              if (point.id == pointId) {
                console.log(point);
                point.rpm = vars.rpm;
                point.varRpm = vars.rpm;
                point.varFmax = vars.fmax;
                point.varLines = vars.lines;
                point.varRev = vars.revolution;
                point.varSamples = vars.samples;
              }
              return point;
            });
            return mawoi;
          });
          return system;
        });
        return area;
      });
      return plant;
    });
    localStorage.setItem("plants", JSON.stringify(plantsStore));
  }

  function findPointForCollectData(id) {
    let plantsStore = localStorage.getItem("plants") || "[]";
    plantsStore = JSON.parse(plantsStore);
    for (let plant of plantsStore) {
      for (let area of plant.areas) {
        for (let system of area.systems) {
          for (let mawoi of system.mawois) {
            for (let point of mawoi.points) {
              if (point.id == id) {
                return {
                  mawoi,
                  point,
                };
              }
            }
          }
        }
      }
    }
    return null;
  }

  function findPointForCollectDataByCode(mawoiId, pointsCode) {
    let plantsStore = localStorage.getItem("plants") || "[]";
    plantsStore = JSON.parse(plantsStore);
    for (let plant of plantsStore) {
      for (let area of plant.areas) {
        for (let system of area.systems) {
          for (let mawoi of system.mawois) {
            if (mawoi.id == mawoiId) {
              for (let point of mawoi.points) {
                if (pointsCode.includes(point.code)) {
                  return {
                    mawoi,
                    point,
                  };
                }
              }
            }
          }
        }
      }
    }
    return null;
  }

  // Añadir el evento de click a cada botón
  function forEachButtonSidebar() {
    let pressTimer;
    document.querySelectorAll("button[data-name]").forEach((button) => {
      button.addEventListener("click", function () {
        const hierarchyName = this.getAttribute("data-name");
        if (hierarchyName.startsWith("bplant")) {
          removePlant(hierarchyName);
        } else {
          toggleMenu(hierarchyName);
          if (hierarchyName.startsWith("mmawoi")) {
            const {
              mawoi: mawoiSelected,
              system,
              plant,
            } = findMawoiForCollectData(+hierarchyName.split("-")[1]);
            localStorage.setItem(
              "mawoiSelected",
              JSON.stringify({ ...mawoiSelected, plantId: plant.id }),
            );
            setInformationMawoi(mawoiSelected, system, plant);
            sidebar.classList.toggle("sidebar-open");
          }
        }
      });

      button.addEventListener("mousedown", (event) => {
        const hierarchyName = event.target.getAttribute("data-name");
        if (hierarchyName.startsWith("mplant")) {
          pressTimer = setTimeout(() => {
            showModalSync(hierarchyName.split("-")[1]);
          }, 1000);
        }
        if (hierarchyName.startsWith("msystem")) {
          pressTimer = setTimeout(() => {
            showModalMawois(hierarchyName.split("-")[1]);
          }, 1000);
        }
      });

      button.addEventListener("touchstart", (event) => {
        const hierarchyName = event.target.getAttribute("data-name");
        if (hierarchyName.startsWith("mplant")) {
          pressTimer = setTimeout(() => {
            showModalSync(hierarchyName.split("-")[1]);
          }, 1000);
        }
      });

      button.addEventListener("mouseup", () => {
        clearTimeout(pressTimer); // Cancela el temporizador si se suelta antes de los 3 segundos
      });

      button.addEventListener("mouseleave", () => {
        clearTimeout(pressTimer); // También cancela el temporizador si el puntero sale del elemento
      });

      button.addEventListener("touchend", () => {
        clearTimeout(pressTimer); // También cancela el temporizador si se suelta antes de los 3 segundos
      });
    });
  }

  // Función para mostrar u ocultar los menús y submenús
  function toggleMenu(id) {
    const menu = document.getElementById(id);
    if (menu) {
      const menuType = id.split("-")[0]; // Obtener el tipo de menú (por ejemplo, 'plant', 'area', 'system', etc.)
      // Cerrar otros menús del mismo tipo
      document
        .querySelectorAll(`ul[id^="${menuType}"]`)
        .forEach((otherMenu) => {
          if (
            otherMenu.id !== menu.id &&
            !otherMenu.classList.contains("hidden")
          ) {
            otherMenu.classList.add("hidden"); // Cerrar el otro menú
          }
        });

      // Alternar el menú actual
      menu.classList.toggle("hidden");
    }
  }

  async function existMawoiInMemory(mawoiId) {
    let mawoiSelectedStore = await getMawoisWithCollectDataStore();
    if (mawoiSelectedStore && mawoiSelectedStore.length > 0) {
      const mawoiSelect = mawoiSelectedStore.find(
        (mawoi) => mawoi.id == mawoiId,
      );
      if (mawoiSelect) {
        // filter distinct points  between
        const pointsDistinct = [
          ...new Set(mawoiSelect.points.map((point) => point.id)),
        ];
        if (mawoiSelect.pointLength <= pointsDistinct.length) {
          return 2;
        }
        return 1;
      }
    }
    return 0;
  }

  // Función para cargar los datos de los menús
  async function createHierarchyList(plants) {
    const container = document.getElementById("plants-container");
    container.innerHTML = "";
    for (const plant of plants.filter(Boolean)) {
      const plantButton = document.createElement("button");
      plantButton.className =
        "w-full text-left py-2 px-1 focus:outline-none text-blue-800 text-xs hover:bg-yellow-500 no-select";
      plantButton.dataset.name = "mplant-" + plant.id;
      plantButton.textContent = plant.description;

      // Crear el elemento img
      const plantImage = document.createElement("img");
      plantImage.src = "/icons/plant.png"; // Ruta de la imagen
      plantImage.alt = "icons plant"; // Texto alternativo
      plantImage.className = "w-6 h-6 mr-2 inline-block"; // Estilo de la imagen

      // Insertar la imagen antes del texto en el botón
      plantButton.prepend(plantImage);

      const areaList = document.createElement("ul");
      areaList.id = "mplant-" + plant.id;
      areaList.className = "hidden"; // Oculto inicialmente

      for (const area of plant.areas) {
        const areaLi = document.createElement("li");

        const areaButton = document.createElement("button");
        areaButton.className =
          "w-full text-left p-1 pl-2 focus:outline-none text-xs hover:bg-yellow-500";
        areaButton.dataset.name = "marea-" + area.id;
        areaButton.textContent = area.description;

        // Crear el elemento img
        const areaImage = document.createElement("img");
        areaImage.src = "/icons/area.png"; // Ruta de la imagen
        areaImage.alt = "icons area"; // Texto alternativo
        areaImage.className = "w-6 h-6 mr-2 inline-block"; // Estilo de la imagen

        // Insertar la imagen antes del texto en el botón
        areaButton.prepend(areaImage);

        const systemList = document.createElement("ul");
        systemList.id = "marea-" + area.id;
        systemList.className = "hidden"; // Oculto inicialmente

        for (const system of area.systems) {
          const systemLi = document.createElement("li");

          const systemButton = document.createElement("button");
          systemButton.className =
            "w-full text-left p-1 pl-3 focus:outline-none text-xs hover:bg-yellow-500";
          systemButton.dataset.name = "msystem-" + system.id;
          systemButton.textContent = system.description;

          // Crear el elemento img
          const systemImage = document.createElement("img");
          systemImage.src = "/icons/system.png"; // Ruta de la imagen
          systemImage.alt = "icons system"; // Texto alternativo
          systemImage.className = "w-6 h-6 mr-2 inline-block"; // Estilo de la imagen

          // Insertar la imagen antes del texto en el botón
          systemButton.prepend(systemImage);

          const mawoiList = document.createElement("ul");
          mawoiList.id = "msystem-" + system.id;
          mawoiList.className = "hidden"; // Oculto inicialmente

          const mawoisWithStatus = await Promise.all(
            system.mawois.map(async (mawoi) => ({
              ...mawoi,
              status: await existMawoiInMemory(mawoi.id),
            })),
          );

          mawoisWithStatus
            .sort((a, b) => a.status - b.status)
            .forEach((mawoi) => {
              const mawoiLi = document.createElement("li");
              const mawoiButton = document.createElement("button");
              mawoiButton.className =
                "w-full text-left p-1 pl-4 bg-white text-blue-900 focus:outline-none text-xs hover:bg-yellow-500";
              mawoiButton.dataset.name = "mmawoi-" + mawoi.id;
              mawoiButton.textContent = mawoi.description;

              // Crear el elemento img
              const mawoiImage = document.createElement("img");
              mawoiImage.src = "/icons/mawoi.png"; // Ruta de la imagen
              mawoiImage.alt = "icons mawoi"; // Texto alternativo
              mawoiImage.className = "w-6 h-6 mr-2 inline-block"; // Estilo de la imagen

              // Insertar la imagen antes del texto en el botón
              mawoiButton.prepend(mawoiImage);

              // Crear el status
              const mawoiStatus = document.createElement("img");
              mawoiStatus.src =
                mawoi.status == 0
                  ? "/icons/uncheck.svg"
                  : mawoi.status == 2
                    ? "/icons/check-completed.svg"
                    : "/icons/check-single.svg"; // Ruta de la imagen
              mawoiStatus.alt = "icons status mawoi"; // Texto alternativo
              mawoiStatus.className = "w-[20px] p-1 inline-block"; // Estilo de la imagen

              mawoiButton.append(mawoiStatus);

              mawoiLi.appendChild(mawoiButton);
              mawoiList.appendChild(mawoiLi);
            });

          systemLi.appendChild(systemButton);
          systemLi.appendChild(mawoiList);
          systemList.appendChild(systemLi);
        }

        areaLi.appendChild(areaButton);
        areaLi.appendChild(systemList);
        areaList.appendChild(areaLi);
      }

      const plantLi = document.createElement("li");

      const plantButtonDelete = document.createElement("button");
      plantButtonDelete.className =
        "text-left p-2 mr-1 text-center bg-red-700 text-white focus:outline-none text-sm hover:bg-red-600 w-[20px]";
      plantButtonDelete.dataset.name = "bplant-" + plant.id;
      // symbol delete
      plantButtonDelete.textContent = "\u00D7";

      const plantDiv = document.createElement("div");
      plantDiv.className = "flex font-semibold";
      plantDiv.appendChild(plantButton);
      plantDiv.appendChild(plantButtonDelete);

      plantLi.appendChild(plantDiv);
      plantLi.appendChild(areaList);
      container.appendChild(plantLi);
    }

    forEachButtonSidebar();
  }

  const plantsStore = localStorage.getItem("plants");
  if (plantsStore) {
    const plants = JSON.parse(plantsStore);
    createHierarchyList(plants);
  }

  var isStatusOnline = navigator.onLine;

  window.addEventListener("online", () => {
    console.log("online");
    isStatusOnline = true;
    if (divButton) {
      divButton.classList.remove("hidden");
    }
  });

  window.addEventListener("offline", () => {
    console.log("offline");
    isStatusOnline = false;
    if (divButton) {
      divButton.classList.add("hidden");
    }
  });

  const $buttonAddPlant = document.getElementById("add-plant");
  if (isStatusOnline && $buttonAddPlant) {
    $buttonAddPlant.addEventListener("click", () => {
      showModalPlants();
    });
  }
</script>
