<div>
  <button
    class="w-full rounded-md rounded-green-700 hover:bg-green-800 hover:text-white text-lg text-green-900 border-green-700 border-2 px-2 py-1"
    onclick="startCollectData()"
    id="collectData">Collect Data</button
  >

  <script is:inline>
    const collectData = document.getElementById("collectData");
    let timeOutChangeMawoiOrPoint = null;

    if (timeOutChangeMawoiOrPoint) {
      clearTimeout(timeOutChangeMawoiOrPoint);
    }

    let mawoisWithCollectData = [];
    let mawoiWithCollectData = {
      id: null,
      code: null,
      description: null,
      pointLength: 0,
      points: [],
    };
    let pointWithCollectData = {
      id: null,
      date: null,
      NEXT_X_W: [],
      NEXT_X_S: [],
      NEXT_Y_W: [],
      NEXT_Y_S: [],
      NEXT_Z_W: [],
      NEXT_Z_S: [],
    };
    var eventActive = "NEXT_X";

    function startCollectData() {
      mawoisWithCollectData =
        localStorage.getItem("mawoisWithCollectData") || "[]";
      mawoisWithCollectData = JSON.parse(mawoisWithCollectData);

      if (!toggle.checked) {
        alert("Please turn on Bluetooth!");
        return;
      }

      let setVariables = localStorage.getItem("setVariables");
      if (!setVariables) {
        setVariablesDefault();
        setVariables = localStorage.getItem("setVariables");
      }

      if (MAWOI_SELECTED == null) {
        alert("Please select a mawoi!");
        return;
      }

      setVariables = JSON.parse(setVariables);

      showLoading();
      updateMessage("Set variables");
      setTimeout(() => {
        writeOnCharacteristic("SET_SAMPLES=" + setVariables.samples);
        setTimeout(() => {
          writeOnCharacteristic("SET_NLINES=" + setVariables.lines);
          setTimeout(() => {
            writeOnCharacteristic("SET_NREVS=" + setVariables.revolution);
            setTimeout(() => {
              writeOnCharacteristic("SET_FMAX=" + setVariables.fmax);
              setTimeout(() => {
                writeOnCharacteristic("SET_RPM=" + setVariables.rpm);
                setTimeout(() => {
                  hideLoading();
                  processCollectData();
                }, 500);
              }, 500);
            }, 500);
          }, 500);
        }, 500);
      }, 0);
    }

    let idxMawoi = -1;

    function processCollectData() {
      drawClear();
      showLoading();
      let mawoiStore = localStorage.getItem("mawoiSelected");
      mawoiStore = JSON.parse(mawoiStore);

      idxMawoi = -1;
      if (mawoisWithCollectData && mawoisWithCollectData.length > 0) {
        idxMawoi = mawoisWithCollectData.findIndex(
          (mawoi) => mawoi.id === mawoiStore.id,
        );
      }

      if (idxMawoi >= 0) {
        mawoiWithCollectData = mawoisWithCollectData[idxMawoi];
      } else {
        mawoiWithCollectData.id = MAWOI_SELECTED.id;
        mawoiWithCollectData.code = MAWOI_SELECTED.code;
        mawoiWithCollectData.plantId = MAWOI_SELECTED.plantId;
        mawoiWithCollectData.description = MAWOI_SELECTED.description;
        const pointsLength = [
          ...new Set(
            MAWOI_SELECTED.points.map((point) => point.code.substr(0, 2)),
          ),
        ].length;
        mawoiWithCollectData.pointLength = pointsLength;
        mawoiWithCollectData.points = [];
      }

      const pointSelect = document.getElementById("point-select");
      pointWithCollectData.id = pointSelect.value;
      pointWithCollectData.date = new Date().getTime();
      pointWithCollectData.description =
        pointSelect.options[pointSelect.selectedIndex].text;

      const vars = localStorage.getItem("setVariables");
      if (vars) {
        pointWithCollectData.vars = JSON.parse(vars);
      }

      showLoading();
      eventActive = "NEXT_X";
      writeOnCharacteristic("NEXT_X");
    }

    function setLocalStorageLatestCollectData() {
      mawoiWithCollectData.points.push({ ...pointWithCollectData });
      if (idxMawoi >= 0) {
        mawoisWithCollectData[idxMawoi] = { ...mawoiWithCollectData };
      } else {
        mawoisWithCollectData.push({ ...mawoiWithCollectData });
      }
      localStorage.setItem(
        "mawoisWithCollectData",
        JSON.stringify(mawoisWithCollectData),
      );

      let plantMemory = localStorage.getItem("plants") || "[]";
      plantMemory = JSON.parse(plantMemory);
      plantMemory = plantMemory.filter(Boolean);
      if (plantMemory && plantMemory.length > 0) {
        createHierarchyList(plantMemory);
        setDateByMawoiId(mawoiWithCollectData.id, pointWithCollectData.id);
      }

      hideLoading();

      validateIfAllPointsAreCollected();
    }

    function nextPointToCollect() {
      const _mawoiSelect = JSON.parse(localStorage.getItem("mawoiSelected"));
      const _mawoisWithCollectData = JSON.parse(
        localStorage.getItem("mawoisWithCollectData") || "[]",
      );
      let pointsValidate = [];
      let idx = -1;
      if (_mawoisWithCollectData && _mawoisWithCollectData.length > 0) {
        idx = _mawoisWithCollectData.findIndex(
          (mawoi) => mawoi.id == _mawoiSelect.id,
        );
        if (idx >= 0) {
          const mawoiStoreValidate = _mawoisWithCollectData[idx];
          pointsValidate = mawoiStoreValidate.points.map(
            (point) => point.description,
          );
          pointsValidate = [...new Set(pointsValidate)];
        }
      }
      let nextPoint = null;
      const uniquePoint = uniquePoints();
      if (idx >= 0) {
        for (let point of uniquePoint) {
          if (!pointsValidate.includes(point)) {
            nextPoint = getPointInMawoiSelect(point);
            break;
          }
        }
      } else {
        nextPoint = _mawoiSelect.points[0];
      }
      return nextPoint;
    }

    function nextMawoiToCollect() {
      const _mawoisWithCollectData = JSON.parse(
        localStorage.getItem("mawoisWithCollectData") || "[]",
      );
      let mawoisValidate = _mawoisWithCollectData.map((mawoi) => mawoi.id);
      const plantMemory = JSON.parse(localStorage.getItem("plants") || "[]");
      let mawoiUnique = [];
      for (let plant of plantMemory) {
        for (let area of plant.areas) {
          for (let system of area.systems) {
            for (let mawoi of system.mawois) {
              if (!mawoisValidate.includes(mawoi.id)) {
                mawoiUnique.push(mawoi.id);
              }
            }
          }
        }
      }
      mawoisValidate = [...new Set(mawoisValidate)];

      let nextMawoi = null;
      for (let mawoi of mawoiUnique) {
        if (!mawoisValidate.includes(mawoi)) {
          nextMawoi = mawoi;
          break;
        }
      }
      return nextMawoi;
    }

    // validate if all points are collected
    // when all points are collected, next mawoi empty
    function validateIfAllPointsAreCollected() {
      const awaitTimeStorage = JSON.parse(localStorage.getItem("awaitTime"));
      const valueAwaitTime = awaitTimeStorage.value;
      const checkedAwaitTime = awaitTimeStorage.checked;

      const nextPoint = nextPointToCollect();
      const nextMawoi = nextMawoiToCollect();

      if (nextPoint && nextPoint.id && checkedAwaitTime) {
        pointSelect.value = nextPoint.id;
        timeOutChangeMawoiOrPoint = setTimeout(() => {
          handleChangePoint();
        }, valueAwaitTime * 1000);
      } else if (nextMawoi && checkedAwaitTime) {
        mawoiSelect.value = nextMawoi;
        timeOutChangeMawoiOrPoint = setTimeout(() => {
          handleChangeMawoi();
        }, valueAwaitTime * 1000);
      }
    }

    function uniquePoints() {
      const _mawoiSelect = JSON.parse(localStorage.getItem("mawoiSelected"));
      if (!_mawoiSelect) {
        return [];
      }
      const points = _mawoiSelect.points.map((point) =>
        point.code.substr(0, 2),
      );

      return [...new Set(points)];
    }

    function getPointInMawoiSelect(code) {
      const _mawoiSelect = JSON.parse(localStorage.getItem("mawoiSelected"));
      return _mawoiSelect.points.find((point) => point.code.includes(code));
    }
  </script>
</div>
