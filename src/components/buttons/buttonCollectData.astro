<div>
  <!-- <button -->
  <!--   class="w-full rounded-md rounded-green-700 hover:bg-green-800 hover:text-white text-lg text-green-900 border-green-700 border-2 px-2 py-1" -->
  <!--   onclick="startCollectData()" -->
  <!--   id="collectData">Collect Data</button -->
  <!-- > -->
  <button
    class="w-full rounded-md rounded-green-700 hover:bg-green-800 hover:text-white text-lg text-green-900 border-green-700 border-2 px-2 py-1 flex items-center justify-center"
    onclick="startCollectDataWifi()"
    id="collectData"
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="inline-block mr-2 align-top"
      style="margin-top:-8px;"
      width="30"
      height="30"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      ><path d="M5 13a10 10 0 0 1 14 0"></path><path d="M8.5 16.5a5 5 0 0 1 7 0"
      ></path><path d="M12 20h.01"></path></svg
    >
    <span> Collect Data </span>
  </button>
</div>
<script is:inline>
  let timeOutChangeMawoiOrPoint = null;

  if (timeOutChangeMawoiOrPoint) {
    clearTimeout(timeOutChangeMawoiOrPoint);
  }

  let mawoisWithCollectData = [];
  let mawoiWithCollectData = {
    id: null,
    code: null,
    description: null,
    pointLength: 0,
    points: [],
  };
  let pointWithCollectData = {
    id: null,
    date: null,
    NEXT_X_W: [],
    NEXT_X_S: [],
    NEXT_Y_W: [],
    NEXT_Y_S: [],
    NEXT_Z_W: [],
    NEXT_Z_S: [],
  };
  var eventActive = "NEXT_X";

  async function startCollectDataWifi() {
    clearTimeout(timeOutChangeMawoiOrPoint);

    const pointInStore = await findPointInCollectData(pointSelect.value);
    if (pointInStore) {
      setBandsInformation(pointInStore.point);
    }

    mawoisWithCollectData = await getMawoisWithCollectDataStore();

    let setVariables = getVariablesStore();
    if (!setVariables) {
      setVariablesDefault();
      setVariables = getVariablesStore();
    }

    if (!setVariables.ip) {
      alert("Please save ip value");
      return;
    }

    if (MAWOI_SELECTED == null) {
      alert("Please select a mawoi!");
      return;
    }

    showLoading();
    updateMessage("Set variables");
    let urlSetVariables = `${ESP32_IP}/${SET_VARIABLES}`;
    urlSetVariables = urlSetVariables.replace("IP", setVariables.ip);
    urlSetVariables = urlSetVariables.replace(
      "SET_VARIABLES",
      "SET_SAMPLES=" + setVariables.samples,
    );
    await fetchData(urlSetVariables);
    urlSetVariables = urlSetVariables.replace(
      "SET_VARIABLES",
      "SET_NLINES=" + setVariables.lines,
    );
    await fetchData(urlSetVariables);
    urlSetVariables = urlSetVariables.replace(
      "SET_VARIABLES",
      "SET_NREVS=" + setVariables.revolution,
    );
    await fetchData(urlSetVariables);
    urlSetVariables = urlSetVariables.replace(
      "SET_VARIABLES",
      `SET_FMAX=${setVariables.fmax}`,
    );
    await fetchData(urlSetVariables);
    urlSetVariables = urlSetVariables.replace(
      "SET_VARIABLES",
      `SET_RPM=${setVariables.rpm}`,
    );
    await fetchData(urlSetVariables);

    await processCollectData();
  }

  // async function startCollectData() {
  //   clearTimeout(timeOutChangeMawoiOrPoint);
  //
  //   if (!toggle.checked) {
  //     alert("Please turn on Bluetooth!");
  //     return;
  //   }
  //
  //   const pointInStore = await findPointInCollectData(pointSelect.value);
  //   if (pointInStore) {
  //     setBandsInformation(pointInStore.point);
  //   }
  //
  //   mawoisWithCollectData = await getMawoisWithCollectDataStore();
  //
  //   let setVariables = getVariablesStore();
  //   if (!setVariables) {
  //     setVariablesDefault();
  //     setVariables = getVariablesStore();
  //   }
  //
  //   if (MAWOI_SELECTED == null) {
  //     alert("Please select a mawoi!");
  //     return;
  //   }
  //
  //   showLoading();
  //   updateMessage("Set variables");
  //   setTimeout(() => {
  //     writeOnCharacteristic("SET_SAMPLES=" + setVariables.samples);
  //     setTimeout(() => {
  //       writeOnCharacteristic("SET_NLINES=" + setVariables.lines);
  //       setTimeout(() => {
  //         writeOnCharacteristic("SET_NREVS=" + setVariables.revolution);
  //         setTimeout(() => {
  //           writeOnCharacteristic("SET_FMAX=" + setVariables.fmax);
  //           setTimeout(() => {
  //             writeOnCharacteristic("SET_RPM=" + setVariables.rpm);
  //             setTimeout(() => {
  //               hideLoading();
  //               processCollectData();
  //             }, 500);
  //           }, 500);
  //         }, 500);
  //       }, 500);
  //     }, 500);
  //   }, 0);
  // }

  let idxMawoi = -1;

  async function processCollectData() {
    drawClear();
    showLoading();
    let mawoiStore = getMawoiSelectedStore();

    idxMawoi = -1;
    if (mawoisWithCollectData && mawoisWithCollectData.length > 0) {
      idxMawoi = mawoisWithCollectData.findIndex(
        (mawoi) => mawoi.id === mawoiStore.id,
      );
    }

    if (idxMawoi >= 0) {
      mawoiWithCollectData = mawoisWithCollectData[idxMawoi];
    } else {
      mawoiWithCollectData.id = MAWOI_SELECTED.id;
      mawoiWithCollectData.code = MAWOI_SELECTED.code;
      mawoiWithCollectData.plantId = MAWOI_SELECTED.plantId;
      mawoiWithCollectData.description = MAWOI_SELECTED.description;
      const pointsLength = [
        ...new Set(
          MAWOI_SELECTED.points.map((point) => point.code.substr(0, 2)),
        ),
      ].length;
      mawoiWithCollectData.pointLength = pointsLength;
      mawoiWithCollectData.points = [];
    }

    const pointSelect = document.getElementById("point-select");
    pointWithCollectData.id = pointSelect.value;
    pointWithCollectData.date = new Date().getTime();
    pointWithCollectData.description =
      pointSelect.options[pointSelect.selectedIndex].text;

    const vars = getVariablesStore();
    if (vars) {
      pointWithCollectData.vars = vars;
    }

    showLoading();
    // eventActive = "NEXT_X";
    // writeOnCharacteristic("NEXT_X");

    let urlGetWaveform = `${ESP32_IP}/${GET_WAVE}`;
    let urlGetSpectrum = `${ESP32_IP}/${GET_SPECTRA}`;
    urlGetWaveform = urlGetWaveform.replace("IP", vars.ip);
    urlGetSpectrum = urlGetSpectrum.replace("IP", vars.ip);
    urlGetWaveform = urlGetWaveform.replace("EJE", "x");
    pointWithCollectData.NEXT_X_W = await fetchData(urlGetWaveform);
    urlGetSpectrum = urlGetSpectrum.replace("EJE", "x");
    pointWithCollectData.NEXT_X_S = processSpectra(
      await fetchData(urlGetSpectrum),
    );
    urlGetWaveform = urlGetWaveform.replace("EJE", "y");
    pointWithCollectData.NEXT_Y_W = await fetchData(urlGetWaveform);
    urlGetSpectrum = urlGetSpectrum.replace("EJE", "y");
    pointWithCollectData.NEXT_Y_S = processSpectra(
      await fetchData(urlGetSpectrum),
    );
    urlGetWaveform = urlGetWaveform.replace("EJE", "z");
    pointWithCollectData.NEXT_Z_W = await fetchData(urlGetWaveform);
    urlGetSpectrum = urlGetSpectrum.replace("EJE", "z");
    pointWithCollectData.NEXT_Z_S = processSpectra(
      await fetchData(urlGetSpectrum),
    );

    setLocalStorageLatestCollectData();
  }

  function saveOrUpdateBandInformationStore(bandInfoTemp) {
    const bandInfoIdx = searchBandInfoInStore(
      bandInfoTemp.mawoiId,
      bandInfoTemp.pointCode,
      bandInfoTemp.date,
    );

    if (bandInfoIdx < 0) {
      addBandsInfoToStore(bandInfoTemp);
    } else {
      updateBandsInfoStore(bandInfoIdx, bandInfoTemp);
    }
  }

  function calculateBandsInformationInCollectData(
    waveform_y,
    spectrum_y,
    pointInUse,
    FMAX,
    COORD,
  ) {
    const bandsInfo = Object.values(pointInUse.bandsInfo);
    const pointCode = pointInUse.code.substr(0, 2);
    let bandInfoTemp = {
      pointCode: pointCode + COORD,
    };
    let coords = [pointCode + "H", pointCode + "X"];
    if (COORD == "Y") {
      coords = [pointCode + "V", pointCode + "Y"];
    } else if (COORD == "Z") {
      coords = [pointCode + "A", pointCode + "Z"];
    }
    bandInfoTemp.crestFactor = roundedDecimal(crestFactor(waveform_y), 3);
    bandInfoTemp.pkTopk = roundedDecimal(peakToPeak(waveform_y).pkTopk, 3);
    bandInfoTemp.overall = roundedDecimal(calculateOverall(spectrum_y), 3);

    const bandsInfoX = bandsInfo.filter((band) =>
      coords.includes(band.pointCode),
    );

    bandsInfoX.forEach((band) => {
      const data = spectrum_y;
      let velocities = spectraVelocity(data);
      velocities = velocities.map((v, idx) => ({
        vs_measure_y: v,
        vs_measure_x: (idx * FMAX) / spectrum_y.length,
      }));

      const bandInfo = processBandsInfo(pointInUse.rpm, velocities, band);
      bandInfoTemp[bandInfo.biv_code] = roundedDecimal(bandInfo.biv_value, 3);
    });

    return bandInfoTemp;
  }

  function setBandsInformation(pointWithCollectData) {
    let pointInUse = findPointForCollectData(pointSelect.value);
    pointInUse = pointInUse.point;

    const vars = pointWithCollectData.vars;
    const FMAX = vars.fmax;

    let bandInfoTemp = {
      mawoiId: mawoiSelect.value,
      date: dateSelect.value,
    };

    // saveOrUpdateBandInformationStore({
    //   ...bandInfoTemp,
    //   ...calculateBandsInformationInCollectData(
    //     pointWithCollectData.NEXT_X_W,
    //     pointWithCollectData.NEXT_X_S,
    //     pointInUse,
    //     FMAX,
    //     "X",
    //   ),
    // });
    //
    // saveOrUpdateBandInformationStore({
    //   ...bandInfoTemp,
    //   ...calculateBandsInformationInCollectData(
    //     pointWithCollectData.NEXT_Y_W,
    //     pointWithCollectData.NEXT_Y_S,
    //     pointInUse,
    //     FMAX,
    //     "Y",
    //   ),
    // });

    // saveOrUpdateBandInformationStore({
    //   ...bandInfoTemp,
    //   ...calculateBandsInformationInCollectData(
    //     pointWithCollectData.NEXT_Z_W,
    //     pointWithCollectData.NEXT_Z_S,
    //     pointInUse,
    //     FMAX,
    //     "Z",
    //   ),
    // });
  }

  function setLocalStorageLatestCollectData() {
    mawoiWithCollectData.points.push({ ...pointWithCollectData });
    if (idxMawoi >= 0) {
      mawoisWithCollectData[idxMawoi] = { ...mawoiWithCollectData };
    } else {
      mawoisWithCollectData.push({ ...mawoiWithCollectData });
    }

    saveMawoisWithCollectDataStore(mawoisWithCollectData);

    let plantMemory = getPlantsStore();
    plantMemory = plantMemory.filter(Boolean);
    if (plantMemory && plantMemory.length > 0) {
      createHierarchyList(plantMemory);
      setDateByMawoiId(mawoiWithCollectData.id, pointWithCollectData.id);
    }

    hideLoading();
    validateIfAllPointsAreCollected();
  }

  async function nextPointToCollect() {
    const _mawoiSelect = getMawoiSelectedStore();
    const _mawoisWithCollectData = await getMawoisWithCollectDataStore();
    let pointsValidate = [];
    let idx = -1;
    if (_mawoisWithCollectData && _mawoisWithCollectData.length > 0) {
      idx = _mawoisWithCollectData.findIndex(
        (mawoi) => mawoi.id == _mawoiSelect.id,
      );
      if (idx >= 0) {
        const mawoiStoreValidate = _mawoisWithCollectData[idx];
        pointsValidate = mawoiStoreValidate.points.map(
          (point) => point.description,
        );
        pointsValidate = [...new Set(pointsValidate)];
      }
    }
    let nextPoint = null;
    const uniquePoint = uniquePoints();
    if (idx >= 0) {
      for (let point of uniquePoint) {
        if (!pointsValidate.includes(point)) {
          nextPoint = getPointInMawoiSelect(point);
          break;
        }
      }
    } else {
      nextPoint = _mawoiSelect.points[0];
    }
    return nextPoint;
  }

  function findPlantNowByMawoiId() {
    const plantsStore = getPlantsStore();
    const mawoiSelectedStore = getMawoiSelectedStore();
    for (let plant of plantsStore) {
      for (let area of plant.areas) {
        for (let system of area.systems) {
          for (let mawoi of system.mawois) {
            if (mawoi.id == mawoiSelectedStore.id) {
              return plant;
            }
          }
        }
      }
    }
    return null;
  }

  async function nextMawoiToCollect() {
    const _mawoisWithCollectData = await getMawoisWithCollectDataStore();
    let mawoisValidate = _mawoisWithCollectData.map((mawoi) => mawoi.id);
    const plant = findPlantNowByMawoiId();
    let mawoiUnique = [];
    for (let area of plant.areas) {
      for (let system of area.systems) {
        for (let mawoi of system.mawois) {
          if (!mawoisValidate.includes(mawoi.id)) {
            mawoiUnique.push(mawoi.id);
          }
        }
      }
    }

    mawoisValidate = [...new Set(mawoisValidate)];

    let nextMawoi = null;
    for (let mawoi of mawoiUnique) {
      if (!mawoisValidate.includes(mawoi)) {
        nextMawoi = mawoi;
        break;
      }
    }
    return nextMawoi;
  }

  // validate if all points are collected
  // when all points are collected, next mawoi empty
  async function validateIfAllPointsAreCollected() {
    const awaitTimeStorage = getAwaitTimeStore();
    const valueAwaitTime = awaitTimeStorage.value;
    const checkedAwaitTime = awaitTimeStorage.checked;

    const nextPoint = await nextPointToCollect();
    const nextMawoi = await nextMawoiToCollect();

    if (nextPoint && nextPoint.id && checkedAwaitTime) {
      timeOutChangeMawoiOrPoint = setTimeout(() => {
        pointSelect.value = nextPoint.id;
        showLoading();
        updateMessage("Next point ...");
        handleChangePoint();
        hideLoading();
      }, valueAwaitTime * 1000);
    } else if (nextMawoi && checkedAwaitTime) {
      timeOutChangeMawoiOrPoint = setTimeout(async () => {
        mawoiSelect.value = nextMawoi;
        console.log("Next mawoi...", nextMawoi);
        showLoading();
        updateMessage("Next mawoi...");
        await handleChangeMawoi();
        hideLoading();
      }, valueAwaitTime * 1000);
    }
  }

  function uniquePoints() {
    const _mawoiSelect = getMawoiSelectedStore();
    if (!_mawoiSelect) {
      return [];
    }
    const points = _mawoiSelect.points.map((point) =>
      MAWOI_SELECTED.isMonoaxial ? point.code : point.code.substr(0, 2),
    );

    return [...new Set(points)];
  }

  function getPointInMawoiSelect(code) {
    const _mawoiSelect = getMawoiSelectedStore();
    return _mawoiSelect.points.find((point) => point.code.includes(code));
  }
</script>
